name: 'ZKVyper Tests'
description: 'Executes zkvyper unit and integration tests'
inputs:
  target:
    description: 'Specific target triplet.'
    required: false
    default: ''
  download-zkvyper:
    description: 'Whether to download prebuilt zkvyper executable (set to `true` if testing prebuilt binaries).'
    required: false
    default: 'false'
  results-xml:
    description: 'Output unit tests results XML filename.'
    required: false
    default: 'unit-tests-results.xml'
  zkvyper-version:
    description: 'Prebuilt version of zkvyper compiler to download and use in tests.'
    required: false
    default: '0.3.10'
  vyper-version:
    description: 'Version of Vyper compiler to download.'
    required: false
    default: '0.3.10'
  vyper-commit:
    description: 'Commit of Vyper compiler to download.'
    required: false
    default: '91361694'
runs:
  using: "composite"
  steps:
    - name: Install vyper compiler
      shell: ${{ runner.os == 'Windows' && 'msys2 {0}' || 'bash' }}
      env:
        VYPER_DOWNLOAD_URL: "https://github.com/vyperlang/vyper/releases/download"
        VYPER_VERSION: ${{ inputs.vyper-version || '0.3.10' }}
        VYPER_COMMIT: ${{ inputs.vyper-commit || '91361694' }}
      run: |
        VYPER_DOWNLOAD_FILENAME="vyper.${VYPER_VERSION}+commit.${VYPER_COMMIT}"
        case "$RUNNER_OS" in
          Linux*)
            OUTPUT=vyper
            VYPER_DOWNLOAD_EXTENSION=".linux"
            ;;
          macOS*)
            OUTPUT=vyper
            VYPER_DOWNLOAD_EXTENSION=".darwin"
            ;;
          Windows*)
            OUTPUT=vyper.exe
            VYPER_DOWNLOAD_EXTENSION=".windows.exe"
            ;;
        esac
        curl --location -o $OUTPUT \
          "${VYPER_DOWNLOAD_URL}/v${VYPER_VERSION}/${VYPER_DOWNLOAD_FILENAME}${VYPER_DOWNLOAD_EXTENSION}"
        chmod a+x ${OUTPUT}
        echo "${PWD}" >> "${GITHUB_PATH}"

    - name: Download prebuilt zkvyper
      shell: ${{ runner.os == 'Windows' && 'msys2 {0}' || 'bash' }}
      if: inputs.zkvyper-version != ''
      env:
        ZKVYPER_DOWNLOAD_URL: "https://github.com/matter-labs/era-compiler-vyper/releases/download"
        ZKVYPER_VERSION: ${{ inputs.zkvyper-version }}
      run: |
        OUTPUT=zkvyper
        case "${RUNNER_OS}-${RUNNER_ARCH}" in
          Linux-ARM64*)
            ZKVYPER_DOWNLOAD_FILENAME="zkvyper-linux-arm64-musl-v${ZKVYPER_VERSION}"
            ;;
          Linux-X64*)
            ZKVYPER_DOWNLOAD_FILENAME="zkvyper-linux-amd64-musl-v${ZKVYPER_VERSION}"
            ;;
          macOS-ARM64*)
            ZKVYPER_DOWNLOAD_FILENAME="zkvyper-macosx-arm64-v${ZKVYPER_VERSION}"
            ;;
          macOS-X64*)
            ZKVYPER_DOWNLOAD_FILENAME="zkvyper-macosx-amd64-v${ZKVYPER_VERSION}"
            ;;
          Windows*)
            OUTPUT=zkvyper.exe
            ZKVYPER_DOWNLOAD_FILENAME="zkvyper-windows-amd64-gnu-v${ZKVYPER_VERSION}.exe"
            ;;
        esac
        curl --location -o $OUTPUT "${ZKVYPER_DOWNLOAD_URL}/${ZKVYPER_VERSION}/${ZKVYPER_DOWNLOAD_FILENAME}"
        chmod a+x "${OUTPUT}"
        echo "${PWD}" >> "${GITHUB_PATH}"

    - name: Define build target
      id: build-target
      if: inputs.target != ''
      env:
        RUSTC_BOOTSTRAP: "1"
      shell: ${{ runner.os == 'Windows' && 'msys2 {0}' || 'bash' }}
      run: |
        rustup target add ${{ inputs.target }}
        echo "target=--target ${{ inputs.target }}" >> "${GITHUB_OUTPUT}"

    - name: Run unit tests
      continue-on-error: true
      shell: ${{ runner.os == 'Windows' && 'msys2 {0}' || 'bash' }}
      env:
        RUSTC_BOOTSTRAP: "1"
      run: |
        cargo install cargo2junit
        cargo test ${{ steps.build-target.outputs.target }} -- -Z unstable-options \
          --format json > results.json
        if [ $? -eq 0 ]; then
          cargo2junit < results.json > "${{ inputs.results-xml }}"
        else
          echo "Unit tests failed"
          exit 1
        fi

    - name: Upload results (MacOS and Windows)
      if: runner.os != 'Linux'
      uses: EnricoMi/publish-unit-test-result-action/composite@v2.12.0
      with:
        check_name: ${{ runner.os }} ${{ runner.arch }} Unit Tests Results
        files: ${{ inputs.results-xml }}
        action_fail_on_inconclusive: true

    - name: Upload results (Linux)
      if: runner.os == 'Linux'
      uses: EnricoMi/publish-unit-test-result-action@v2.12.0
      with:
        check_name: ${{ runner.os }} ${{ runner.arch }} Unit Tests Results
        files: ${{ inputs.results-xml }}
        action_fail_on_inconclusive: true

    - name: Setup Node.js
      uses: actions/setup-node@v3
      with:
        node-version: '18'

    - name: Run CLI tests
      shell: ${{ runner.os == 'Windows' && 'msys2 {0}' || 'bash' }}
      working-directory: cli-tests
      run: |
        npm install
        npx jest --verbose
